{"ast":null,"code":"/**\n * Expense Management API\n *\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nimport { HttpHeaders } from '@angular/common/http';\nimport { CustomHttpParameterCodec } from './encoder';\nimport { Configuration } from './configuration';\nexport class BaseService {\n  constructor(basePath, configuration) {\n    this.basePath = 'http://localhost:8080/api';\n    this.defaultHeaders = new HttpHeaders();\n    this.configuration = configuration || new Configuration();\n    if (typeof this.configuration.basePath !== 'string') {\n      const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;\n      if (firstBasePath != undefined) {\n        basePath = firstBasePath;\n      }\n      if (typeof basePath !== 'string') {\n        basePath = this.basePath;\n      }\n      this.configuration.basePath = basePath;\n    }\n    this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n  }\n  canConsumeForm(consumes) {\n    return consumes.indexOf('multipart/form-data') !== -1;\n  }\n  addToHttpParams(httpParams, value, key, isDeep = false) {\n    // If the value is an object (but not a Date), recursively add its keys.\n    if (typeof value === 'object' && !(value instanceof Date)) {\n      return this.addToHttpParamsRecursive(httpParams, value, isDeep ? key : undefined, isDeep);\n    }\n    return this.addToHttpParamsRecursive(httpParams, value, key);\n  }\n  addToHttpParamsRecursive(httpParams, value, key, isDeep = false) {\n    if (value === null || value === undefined) {\n      return httpParams;\n    }\n    if (typeof value === 'object') {\n      // If JSON format is preferred, key must be provided.\n      if (key != null) {\n        return isDeep ? Object.keys(value).reduce((hp, k) => hp.append(`${key}[${k}]`, value[k]), httpParams) : httpParams.append(key, JSON.stringify(value));\n      }\n      // Otherwise, if it's an array, add each element.\n      if (Array.isArray(value)) {\n        value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n      } else if (value instanceof Date) {\n        if (key != null) {\n          httpParams = httpParams.append(key, value.toISOString());\n        } else {\n          throw Error(\"key may not be null if value is Date\");\n        }\n      } else {\n        Object.keys(value).forEach(k => {\n          const paramKey = key ? `${key}.${k}` : k;\n          httpParams = this.addToHttpParamsRecursive(httpParams, value[k], paramKey);\n        });\n      }\n      return httpParams;\n    } else if (key != null) {\n      return httpParams.append(key, value);\n    }\n    throw Error(\"key may not be null if value is not object or array\");\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}