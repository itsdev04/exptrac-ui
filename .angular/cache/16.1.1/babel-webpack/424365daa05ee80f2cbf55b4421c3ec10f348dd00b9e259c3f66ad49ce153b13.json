{"ast":null,"code":"export class Configuration {\n  constructor({\n    accessToken,\n    apiKeys,\n    basePath,\n    credentials,\n    encodeParam,\n    encoder,\n    password,\n    username,\n    withCredentials\n  } = {}) {\n    if (apiKeys) {\n      this.apiKeys = apiKeys;\n    }\n    if (username !== undefined) {\n      this.username = username;\n    }\n    if (password !== undefined) {\n      this.password = password;\n    }\n    if (accessToken !== undefined) {\n      this.accessToken = accessToken;\n    }\n    if (basePath !== undefined) {\n      this.basePath = basePath;\n    }\n    if (withCredentials !== undefined) {\n      this.withCredentials = withCredentials;\n    }\n    if (encoder) {\n      this.encoder = encoder;\n    }\n    this.encodeParam = encodeParam ?? (param => this.defaultEncodeParam(param));\n    this.credentials = credentials ?? {};\n  }\n  /**\n   * Select the correct content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param contentTypes - the array of content types that are available for selection\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  selectHeaderContentType(contentTypes) {\n    if (contentTypes.length === 0) {\n      return undefined;\n    }\n    const type = contentTypes.find(x => this.isJsonMime(x));\n    if (type === undefined) {\n      return contentTypes[0];\n    }\n    return type;\n  }\n  /**\n   * Select the correct accept content-type to use for a request.\n   * Uses {@link Configuration#isJsonMime} to determine the correct accept content-type.\n   * If no content type is found return the first found type if the contentTypes is not empty\n   * @param accepts - the array of content types that are available for selection.\n   * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n   */\n  selectHeaderAccept(accepts) {\n    if (accepts.length === 0) {\n      return undefined;\n    }\n    const type = accepts.find(x => this.isJsonMime(x));\n    if (type === undefined) {\n      return accepts[0];\n    }\n    return type;\n  }\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  isJsonMime(mime) {\n    const jsonMime = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n  lookupCredential(key) {\n    const value = this.credentials[key];\n    return typeof value === 'function' ? value() : value;\n  }\n  addCredentialToHeaders(credentialKey, headerName, headers, prefix) {\n    const value = this.lookupCredential(credentialKey);\n    return value ? headers.set(headerName, (prefix ?? '') + value) : headers;\n  }\n  addCredentialToQuery(credentialKey, paramName, query) {\n    const value = this.lookupCredential(credentialKey);\n    return value ? query.set(paramName, value) : query;\n  }\n  defaultEncodeParam(param) {\n    // This implementation exists as fallback for missing configuration\n    // and for backwards compatibility to older typescript-angular generator versions.\n    // It only works for the 'simple' parameter style.\n    // Date-handling only works for the 'date-time' format.\n    // All other styles and Date-formats are probably handled incorrectly.\n    //\n    // But: if that's all you need (i.e.: the most common use-case): no need for customization!\n    const value = param.dataFormat === 'date-time' && param.value instanceof Date ? param.value.toISOString() : param.value;\n    return encodeURIComponent(String(value));\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}