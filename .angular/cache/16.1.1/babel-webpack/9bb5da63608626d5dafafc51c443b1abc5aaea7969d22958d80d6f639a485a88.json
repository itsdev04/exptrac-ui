{"ast":null,"code":"import { HttpContext } from '@angular/common/http';\n// @ts-ignore\nimport { BASE_PATH } from '../variables';\nimport { BaseService } from '../api.base.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../configuration\";\nexport let CategoryService = /*#__PURE__*/(() => {\n  class CategoryService extends BaseService {\n    constructor(httpClient, basePath, configuration) {\n      super(basePath, configuration);\n      this.httpClient = httpClient;\n    }\n    categoriesGet(observe = 'body', reportProgress = false, options) {\n      let localVarHeaders = this.defaultHeaders;\n      const localVarHttpHeaderAcceptSelected = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept(['application/json']);\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n      const localVarHttpContext = options?.context ?? new HttpContext();\n      let responseType_ = 'json';\n      if (localVarHttpHeaderAcceptSelected) {\n        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n          responseType_ = 'text';\n        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n          responseType_ = 'json';\n        } else {\n          responseType_ = 'blob';\n        }\n      }\n      let localVarPath = `/categories`;\n      const {\n        basePath,\n        withCredentials\n      } = this.configuration;\n      return this.httpClient.request('get', `${basePath}${localVarPath}`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        ...(withCredentials ? {\n          withCredentials\n        } : {}),\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n    categoriesIdDelete(id, observe = 'body', reportProgress = false, options) {\n      if (id === null || id === undefined) {\n        throw new Error('Required parameter id was null or undefined when calling categoriesIdDelete.');\n      }\n      let localVarHeaders = this.defaultHeaders;\n      const localVarHttpHeaderAcceptSelected = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([]);\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n      const localVarHttpContext = options?.context ?? new HttpContext();\n      let responseType_ = 'json';\n      if (localVarHttpHeaderAcceptSelected) {\n        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n          responseType_ = 'text';\n        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n          responseType_ = 'json';\n        } else {\n          responseType_ = 'blob';\n        }\n      }\n      let localVarPath = `/categories/${this.configuration.encodeParam({\n        name: \"id\",\n        value: id,\n        in: \"path\",\n        style: \"simple\",\n        explode: false,\n        dataType: \"number\",\n        dataFormat: undefined\n      })}`;\n      const {\n        basePath,\n        withCredentials\n      } = this.configuration;\n      return this.httpClient.request('delete', `${basePath}${localVarPath}`, {\n        context: localVarHttpContext,\n        responseType: responseType_,\n        ...(withCredentials ? {\n          withCredentials\n        } : {}),\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n    categoriesIdPut(id, category, observe = 'body', reportProgress = false, options) {\n      if (id === null || id === undefined) {\n        throw new Error('Required parameter id was null or undefined when calling categoriesIdPut.');\n      }\n      if (category === null || category === undefined) {\n        throw new Error('Required parameter category was null or undefined when calling categoriesIdPut.');\n      }\n      let localVarHeaders = this.defaultHeaders;\n      const localVarHttpHeaderAcceptSelected = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([]);\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n      const localVarHttpContext = options?.context ?? new HttpContext();\n      // to determine the Content-Type header\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n      let responseType_ = 'json';\n      if (localVarHttpHeaderAcceptSelected) {\n        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n          responseType_ = 'text';\n        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n          responseType_ = 'json';\n        } else {\n          responseType_ = 'blob';\n        }\n      }\n      let localVarPath = `/categories/${this.configuration.encodeParam({\n        name: \"id\",\n        value: id,\n        in: \"path\",\n        style: \"simple\",\n        explode: false,\n        dataType: \"number\",\n        dataFormat: undefined\n      })}`;\n      const {\n        basePath,\n        withCredentials\n      } = this.configuration;\n      return this.httpClient.request('put', `${basePath}${localVarPath}`, {\n        context: localVarHttpContext,\n        body: category,\n        responseType: responseType_,\n        ...(withCredentials ? {\n          withCredentials\n        } : {}),\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n    categoriesPost(category, observe = 'body', reportProgress = false, options) {\n      if (category === null || category === undefined) {\n        throw new Error('Required parameter category was null or undefined when calling categoriesPost.');\n      }\n      let localVarHeaders = this.defaultHeaders;\n      const localVarHttpHeaderAcceptSelected = options?.httpHeaderAccept ?? this.configuration.selectHeaderAccept([]);\n      if (localVarHttpHeaderAcceptSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);\n      }\n      const localVarHttpContext = options?.context ?? new HttpContext();\n      // to determine the Content-Type header\n      const consumes = ['application/json'];\n      const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);\n      if (httpContentTypeSelected !== undefined) {\n        localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);\n      }\n      let responseType_ = 'json';\n      if (localVarHttpHeaderAcceptSelected) {\n        if (localVarHttpHeaderAcceptSelected.startsWith('text')) {\n          responseType_ = 'text';\n        } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {\n          responseType_ = 'json';\n        } else {\n          responseType_ = 'blob';\n        }\n      }\n      let localVarPath = `/categories`;\n      const {\n        basePath,\n        withCredentials\n      } = this.configuration;\n      return this.httpClient.request('post', `${basePath}${localVarPath}`, {\n        context: localVarHttpContext,\n        body: category,\n        responseType: responseType_,\n        ...(withCredentials ? {\n          withCredentials\n        } : {}),\n        headers: localVarHeaders,\n        observe: observe,\n        reportProgress: reportProgress\n      });\n    }\n  }\n  CategoryService.ɵfac = function CategoryService_Factory(t) {\n    return new (t || CategoryService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(BASE_PATH, 8), i0.ɵɵinject(i2.Configuration, 8));\n  };\n  CategoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CategoryService,\n    factory: CategoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return CategoryService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}